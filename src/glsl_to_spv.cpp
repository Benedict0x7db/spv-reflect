#include <iostream>
#include <map>
#include "global_fun.h"
#include <fstream>
#include <string>

void help()
{
    printf(" Invalid parameter!                                                  \n");
    printf(" Example usage: cat <filename> | EncryptString <option> <password>   \n");
    printf("       Options:                                                      \n");
    printf("            -e  Encrypt                                              \n");
    printf("            -d  Decrypt                                              \n");
}

int glsl_to_svp() {
    auto vertCode = readShaderFile("../shaders/tri.vert");
    auto fragCode = readShaderFile("../shaders/tri.frag");


    std::vector<ShaderInfo> vertshaderInfo;
    std::vector<ShaderInfo> fragshaderInfo;
    getShaderInfo(vertshaderInfo, vertCode);
    getShaderInfo(fragshaderInfo, fragCode);

    std::vector<unsigned int> vtx_spv;
    std::vector<unsigned int> frag_spv;

    GLSLtoSPV(VK_SHADER_STAGE_VERTEX_BIT, vertCode.data(), vertCode.size(), vtx_spv);
    GLSLtoSPV(VK_SHADER_STAGE_FRAGMENT_BIT, fragCode.data(), fragCode.size(), frag_spv);

    char data[2048];
    for( int i = 0; i < vtx_spv.size(); ++ i){
        data[i] = vtx_spv[i];
    }


    writeShaderFile("../shaders/tri.vert.spv", vtx_spv, vertshaderInfo);
    writeShaderFile("../shaders/tri.frag.spv", frag_spv, fragshaderInfo);

    printf(" glsl to svp success");
    return 0;
}

void testHexToStr()
{
    unsigned char pOut[16] = {0};
    unsigned char pSrc[34] = {0};
    memcpy(pSrc, "00112233445566778899AABBCCDDEEFF", 33);
    StrToHex(pOut, pSrc,16);

    char *pData = "\x0a\x00\x00\x00\x16\x0c\x03\x00\x02\x0f\x42\x1f\x44\x40";

    unsigned char hex[] = {0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xAA,0xBB,0xCC,0xDD,0xEE,0xFF};
    unsigned char szOut[33] = {0};
    HexToStr(szOut,hex,16);
    return;
}

void enc(const char *src, int srcLen, const char *key, int keyLen, char *dst)
{
    memcpy(dst,&srcLen,sizeof(int));

    char *strDst = dst + 4;
    for (int i = 0; i < srcLen; ++i)
    {
        //简单的异或加密
        strDst[i] = src[i] ^ key[i % keyLen];
    }
}

void dec(const char *src, int srcLen, const char *key, int keyLen, char *dst)
{
    for (int i = 0; i < srcLen; ++i)
    {
        dst[i] = src[i] ^ key[i % keyLen];
    }
}

void testObsShader()
{
    const char *srcVS = "030223070000010002000d00340000000000000011000200010000000b00060001000000474c534c2e7374642e343530000000000e00030000000000010000000f000b0000000000040000006d61696e000000000a000000200000002c0000002e00000031000000320000000300030002000000c201000004000900474c5f4152425f73657061726174655f7368616465725f6f626a65637473000004000a00474c5f474f4f474c455f6370705f7374796c655f6c696e655f646972656374697665000004000800474c5f474f4f474c455f696e636c7564655f6469726563746976650005000400040000006d61696e000000000500060008000000676c5f50657256657274657800000000060006000800000000000000676c5f506f736974696f6e00050003000a00000000000000050004000e0000005550726f6a000000060005000e0000000000000070726f6a0000000005000400100000007570726f6a0000000500070014000000556e69666f726d4275666665724f626a656374000600050014000000000000006d6f64656c0000000600050014000000010000007669657700000000050003001600000075626f000500050020000000696e506f736974696f6e0000050005002c00000066726167436f6c6f72000000050004002e000000696e436f6c6f7200050006003100000066726167546578436f6f7264000000000500050032000000696e546578436f6f726400004800050008000000000000000b00000000000000470003000800000002000000480004000e0000000000000005000000480005000e000000000000002300000000000000480005000e000000000000000700000010000000470003000e00000002000000470004001000000022000000000000004700040010000000210000000100000048000400140000000000000005000000480005001400000000000000230000000000000048000500140000000000000007000000100000004800040014000000010000000500000048000500140000000100000023000000400000004800050014000000010000000700000010000000470003001400000002000000470004001600000022000000000000004700040016000000210000000000000047000400200000001e00000000000000470004002c0000001e00000000000000470004002e0000001e0000000100000047000400310000001e0000000100000047000400320000001e000000020000001300020002000000210003000300000002000000160003000600000020000000170004000700000006000000040000001e0003000800000007000000200004000900000003000000080000003b000400090000000a00000003000000150004000b00000020000000010000002b0004000b0000000c00000000000000180004000d00000007000000040000001e0003000e0000000d000000200004000f000000020000000e0000003b0004000f00000010000000020000002000040011000000020000000d0000001e000400140000000d0000000d000000200004001500000002000000140000003b0004001500000016000000020000002b0004000b0000001700000001000000170004001e0000000600000002000000200004001f000000010000001e0000003b0004001f00000020000000010000002b0004000600000022000000000000002b00040006000000230000000000803f20000400280000000300000007000000170004002a0000000600000003000000200004002b000000030000002a0000003b0004002b0000002c00000003000000200004002d000000010000002a0000003b0004002d0000002e000000010000002000040030000000030000001e0000003b0004003000000031000000030000003b0004001f00000032000000010000003600050002000000040000000000000003000000f800020005000000410005001100000012000000100000000c0000003d0004000d000000130000001200000041000500110000001800000016000000170000003d0004000d0000001900000018000000920005000d0000001a000000130000001900000041000500110000001b000000160000000c0000003d0004000d0000001c0000001b000000920005000d0000001d0000001a0000001c0000003d0004001e000000210000002000000051000500060000002400000021000000000000005100050006000000250000002100000001000000500007000700000026000000240000002500000022000000230000009100050007000000270000001d000000260000004100050028000000290000000a0000000c0000003e00030029000000270000003d0004002a0000002f0000002e0000003e0003002c0000002f0000003d0004001e00000033000000320000003e0003003100000033000000fd00010038000100";
    const char *srcFS = "030223070000010002000d00170000000000000011000200010000000b00060001000000474c534c2e7374642e343530000000000e00030000000000010000000f00080004000000040000006d61696e000000000900000011000000160000001000030004000000070000000300030002000000c201000004000900474c5f4152425f73657061726174655f7368616465725f6f626a65637473000004000a00474c5f474f4f474c455f6370705f7374796c655f6c696e655f646972656374697665000004000800474c5f474f4f474c455f696e636c7564655f6469726563746976650005000400040000006d61696e0000000005000500090000006f7574436f6c6f7200000000050005000d00000074657853616d706c65720000050006001100000066726167546578436f6f726400000000050005001600000066726167436f6c6f7200000047000400090000001e00000000000000470004000d0000002200000000000000470004000d000000210000000a00000047000400110000001e0000000100000047000400160000001e00000000000000130002000200000021000300030000000200000016000300060000002000000017000400070000000600000004000000200004000800000003000000070000003b000400080000000900000003000000190009000a000000060000000100000000000000000000000000000001000000000000001b0003000b0000000a000000200004000c000000000000000b0000003b0004000c0000000d00000000000000170004000f00000006000000020000002000040010000000010000000f0000003b00040010000000110000000100000017000400140000000600000003000000200004001500000001000000140000003b0004001500000016000000010000003600050002000000040000000000000003000000f8000200050000003d0004000b0000000e0000000d0000003d0004000f00000012000000110000005700050007000000130000000e000000120000003e0003000900000013000000fd00010038000100";


    //srcVS
    int ilenVS = strlen(srcVS) / 2;
    std::vector<char> vertexShaderCode(ilenVS);
    StrToHex((unsigned char *)vertexShaderCode.data(), (unsigned char *)srcVS, ilenVS );

    FILE *pFile = fopen("triangle-vs.spv", "wb");
    fwrite(vertexShaderCode.data(), vertexShaderCode.size(), 1, pFile);
    fclose(pFile);

    //srcFS
    int ilenFS = strlen(srcFS) / 2;
    std::vector<char> fragmentShaderCode(ilenFS);
    StrToHex((unsigned char *)fragmentShaderCode.data(), (unsigned char *)srcFS, ilenFS );

    FILE *pFS = fopen("triangle-fs.spv", "wb");
    fwrite(fragmentShaderCode.data(), fragmentShaderCode.size(), 1, pFS);
    fclose(pFS);
}


int main(int argc, char **argv)
{
    char *pdata = NULL;
    char &ch = pdata[0];
//    testObsShader();
    obscureShader("../shaders/triangle.glsl", "../shaders/triangle.spv");
//    testHexToStr();
//    glsl_to_svp();
//    readShaderSpvFile("../shaders/tri.vert.spv");
//    return 0;


    return 0;
}